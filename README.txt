====================================================
******************************     程序名称：textCheck    ******************************
====================================================
简要介绍：程序主要应用于英文文本的拼写错误检测。
运行环境：Windows10       JRE System Library：JavaSE-1.8
开发平台：Eclipse-JEE
作      者： HDS
时      间： 2019.04.05
版      本： V1.0
源码地址：https://github.com/HuntleyEC/textCheck.git
下载地址：https://pan.baidu.com/s/1ZkWBOrn2zIapyD_7jt0mdw 
提取码：ljsy 
---------------------------------------------------------------------------------
 ***************************             运行步骤          ***************************  
---------------------------------------------------------------------------------
1. 安装 jdk-8u202-windows-x64.exe 并配置路径
2. 安装 eclipse-jee-2019-03-R-win32-x86_64
3. 下载并解压 textCheck 压缩包到 workspace 路径
4. 将待检测文件重命名为“Test.txt”放入到textCheck文件夹下
5. import->existing projects into workspace 选择工程，添加项目并运行
---------------------------------------------------------------------------------
***************************              文件说明          ***************************  
---------------------------------------------------------------------------------
源程序   ：checkTeX.java
输入文本：englishDictionary.txt         Test.txt
*************************************************************
1. 使用说明
*************************************************************
      程序对因为句首字母大小写或者单词末尾含有符号等引起的拼写错误
会自动忽略，对不在字典里或拼写错误单词，首先提示错误单词以及其所
在位置，之后按以下过程执行：
A. 进行人工判定
    输入“0”默认单词正确，将单词写入文本，同时加到字典中
B. 单词不正确，输出推荐单词序列 
    输入“1-8”  ，选择字典推荐单词，写入文本
C. 单词不正确，请用户输入替换单词
    输入正确单词，将单词写入文本，同时加到字典中

等到所有文本检测完成后，保存结果，输出"文本检测完毕"。

*************************************************************
2. 可调参数:
*************************************************************
insertCost		//插入距离  可用相应函数替换 
removeCost	//删除距离
substitudeCost	//替换距离   
subcostMat	//替换距离二维数组，依据键盘距离定义不同替换距离
recTrd		//推荐单词路径阈值下限
editTrd		//检测编辑路径阈值上限
recNum		//输出推荐单词个数上限,默认8 个

*************************************************************
3. 函数功能：
*************************************************************
--------------------------------------------------
subeditCost(char a,char b)
输入：字符 a b
输出：a b 的替换距离
功能：计算a b 的键盘距离
--------------------------------------------------
put(String term)
输入：新词字符串
输出：无
功能：将新词写入BK树
--------------------------------------------------
search(String term,double redius)
输入：term   待查询的单词 
          redius 相似距离阈值
输出：results 满足阈值范围的所有单词
功能：检索推荐词汇
--------------------------------------------------
ComputeDistance(String target,String source)
输入：target 待查询的单词 
          source 检索单词
输出：distance 两词汇编辑距离
功能：计算编辑距离
--------------------------------------------------
createeditTree(String path)；
输入：字典路径
输出：无
功能：编辑检测距离BK树
--------------------------------------------------
writeToDirectionary(String word,String path)；
输入：word   新单词  
          path   字典路径
输出：无
功能：将新词写入字典
--------------------------------------------------
*************************************************************
4. 相关原理
*************************************************************
编辑距离
BK树

*************************************************************
5. 测试结果
*************************************************************
提示：在 writed 中
第1个单词  writed 错误
A.输入 0 接受单词  writed，并写入字典
B.输入推荐单词对应序号替换 writed
1.waited 2.write 3.whited 4.writes 5.writer 
C.直接输入替换单词

---------------------------------------------------------------------------------
***************************                END               ***************************
---------------------------------------------------------------------------------
